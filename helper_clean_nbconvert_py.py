#!/usr/bin/env python3
"""
remove_jupyter_markers.py

A CLI tool to remove Jupyter nbconvert cell markers from a Python script.

Usage:
    python remove_jupyter_markers.py input.py [output.py]
"""

import argparse
import re
import sys
import os
import tempfile
import shutil

def is_jupyter_cell_marker(line):
    # Matches cell markers like "# In[ ]:", "# In[12]:", with optional spaces, and "# %%"
    if re.match(r'^\s*#\s*In\[\s*\d*\s*\]\s*:\s*$', line):
        return True
    if re.match(r'^\s*#\s*%%\s*$', line):
        return True
    return False

def remove_jupyter_markers(input_path, output_path):
    with open(input_path, "r", encoding="utf-8") as fin, open(output_path, "w", encoding="utf-8") as fout:
        for line in fin:
            if not is_jupyter_cell_marker(line):
                fout.write(line)

def overwrite_file_safely(input_path):
    dir_name = os.path.dirname(input_path)
    # Create a true temporary file in the same directory as input
    with tempfile.NamedTemporaryFile('w', dir=dir_name, delete=False, encoding="utf-8") as tmpfile:
        try:
            remove_jupyter_markers(input_path, tmpfile.name)
            tmpfile.flush()
            os.fsync(tmpfile.fileno())
            shutil.move(tmpfile.name, input_path)
            collapse_blank_lines(input_path)
            print(f"Cleaned file saved to '{input_path}'.")
        except Exception as e:
            print(f"Error during file overwrite: {e}", file=sys.stderr)
            os.unlink(tmpfile.name)
            sys.exit(1)

def collapse_blank_lines(file_path):
    """Reduce groups of >2 consecutive blank lines in-place."""
    with open(file_path, "r", encoding="utf-8") as f:
        lines = f.readlines()

    new_lines = []
    blank_count = 0
    for line in lines:
        if line.strip() == "":
            blank_count += 1
            if blank_count <= 2:
                new_lines.append(line)
            # else: skip line (itâ€™s an excessive blank)
        else:
            blank_count = 0
            new_lines.append(line)

    with open(file_path, "w", encoding="utf-8") as f:
        f.writelines(new_lines)

def main():
    parser = argparse.ArgumentParser(description="Remove Jupyter nbconvert cell markers from a Python script.")
    parser.add_argument("input", help="Path to the input Python (.py) file generated by nbconvert.")
    parser.add_argument("output", nargs="?", help="Output cleaned Python file (or overwrite input if omitted).")
    args = parser.parse_args()

    input_path = args.input
    output_path = args.output

    if not os.path.isfile(input_path):
        print(f"Error: Input file '{input_path}' does not exist.", file=sys.stderr)
        sys.exit(1)

    if output_path is None:
        confirm = input(f"No output file specified. This will OVERWRITE '{input_path}'. Continue? [y/N]: ")
        if confirm.lower() != "y":
            print("Aborted.")
            sys.exit(0)
        overwrite_file_safely(input_path)
    else:
        try:
            remove_jupyter_markers(input_path, output_path)
            collapse_blank_lines(output_path)
            print(f"Cleaned file saved to '{output_path}'.")
        except Exception as e:
            print(f"Error writing output file: {e}", file=sys.stderr)
            sys.exit(1)

if __name__ == "__main__":
    main()